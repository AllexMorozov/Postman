{
	"info": {
		"_postman_id": "0fdd9aaa-bf9b-4d74-9c4d-e8d9c4824551",
		"name": "homework_2_scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Tom\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"26\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1800);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var reqData = request.data;\r",
							"var salary = parseInt(reqData.salary);\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name response == name request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age response == age request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary response == salary request\", function () {\r",
							"  pm.expect(jsonData.salary).to.eql(salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"salary 1.5 year == 4x_salary\", function () {\r",
							"    // var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(4*salary);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Tom",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1800",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "Tom",
							"disabled": true
						},
						{
							"key": "",
							"value": "22",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" var reqData = pm.request.url.query.all();\r",
							"    var resData = pm.response.json();\r",
							" \r",
							" // Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"\r",
							"pm.test(\"Check name response vs reguest\", function () {\r",
							"    pm.expect(resData.name).to.eql(reqData[0].value);\r",
							"});\r",
							"\r",
							"//  Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age response vs request\", function () {\r",
							"    pm.expect(resData.age).to.eql(reqData[1].value);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"pm.test(\"Console.log family\", function () {\r",
							"    console.log(resData.family);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog nave name\", function () {\r",
							"    pm.expect(resData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog nave age\", function () {\r",
							"    pm.expect(resData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog's name is Luky\", function () {\r",
							"    pm.expect(resData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog's age is four\", function () {\r",
							"     pm.expect(resData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alex&age=44&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "44"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							" var resData = pm.response.json();\r",
							" var resSalary1 = parseInt(resData.salary[1]);\r",
							" var resSalary2 = parseInt(resData.salary[2]);\r",
							"\r",
							"// 4. Спарсить request.\r",
							" var reqData = pm.request.url.query.all();\r",
							" var reqAge = parseInt(reqData[1].value);\r",
							" var reqSalary = parseInt(reqData[2].value);\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name response vs reguest\", function () {\r",
							"   pm.expect(resData.name).to.eql(reqData[0].value);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age response vs reguest\", function () {\r",
							"   \r",
							"   pm.expect(resData.age).to.eql(reqAge);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"pm.test(\"Display salary from request\", function () {\r",
							"  console.log(reqData[2].value);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"pm.test(\"Display salary from response\", function () {\r",
							"  console.log(resData.salary)\r",
							"});\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"pm.test(\"Display salary[0] from response\", function () {\r",
							"  console.log(resData.salary[0])\r",
							"});\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"pm.test(\"Display salary[1] from response\", function () {\r",
							"  console.log(resData.salary[1])\r",
							"});\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"pm.test(\"Display salary[2] from response\", function () {\r",
							"  console.log(resData.salary[2])\r",
							"});\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check response salary[0] vs reguest salary\", function () {\r",
							"   \r",
							"   pm.expect(resData.salary[0]).to.eql(reqSalary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check response salary[1] vs reguest salary*2\", function () {\r",
							"   \r",
							"   pm.expect(resSalary1).to.eql(2*reqSalary);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check response salary[1] vs reguest salary*2\", function () {\r",
							"   \r",
							"   pm.expect(resSalary2).to.eql(3*reqSalary);\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", \"Igor\");\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", \"33\");\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", \"3200\");\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resData.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", resData.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", resData.salary[0]);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var arr = resData.salary;\r",
							"var count = 1;\r",
							"for(var i = 0; i<arr.length; i++){\r",
							"    console.log(count, arr[i])\r",
							"    count++;\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005 /object_info_4?name=Igor&age=33&salary=3200",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005 ",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Igor"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "3200"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// // 1. Вставить параметр salary из окружения в request\r",
							"// pm.environment.get(\"salary\");\r",
							"\r",
							"// // 2. Вставить параметр age из окружения в age\r",
							"// pm.environment.get(\"age\");\r",
							"\r",
							"// // 3. Вставить параметр name из окружения в name\r",
							"// pm.environment.get(\"name\");\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"  var resData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var reqData = request.data;\r",
							"var reqSalary = parseInt(reqData.salary);\r",
							"var reqAge = parseInt(reqData.age);\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response have start_qa_salary\", function () {\r",
							"    pm.expect(resData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response have qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response have qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response have qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response have qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"}); \r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response have person\", function () {\r",
							"    pm.expect(resData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Start salary response == salary request\", function () {;\r",
							"    pm.expect(resData.start_qa_salary).to.eql(reqSalary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary response after 6mnth == 2*salary request\", function () {;\r",
							"    pm.expect(resData.qa_salary_after_6_months).to.eql(2*reqSalary);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Salary response after 12mnth == 2.7*salary request\", function () {;\r",
							"    pm.expect(resData.qa_salary_after_12_months).to.eql(2.7*reqSalary);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary response after 1.5 years == 3.3*salary request\", function () {;\r",
							"    pm.expect(resData[\"qa_salary_after_1.5_year\"]).to.eql(3.3*reqSalary);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Salary response after 3.5 years == 3.8*salary request\", function () {;\r",
							"    pm.expect(resData[\"qa_salary_after_3.5_years\"]).to.eql(3.8*reqSalary);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name[1] from person == salary request\", function () {;\r",
							"    pm.expect(resData.person.u_name[1]).to.eql(reqSalary);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age from person == age request\", function () {;\r",
							"    pm.expect(resData.person.u_age).to.eql(reqAge);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years == age 4.2*salary request\", function () {;\r",
							"    pm.expect(resData.person.u_salary_5_years).to.eql(4.2*reqSalary);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var arr = resData.person;\r",
							"for(i in arr){\r",
							"    console.log(i + '= ' + arr[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Sasha",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}